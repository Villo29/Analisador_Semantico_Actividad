
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN COMMA CONSOLE DIVIDE DO DOT ENDDO ENDWHILE EQ FLOAT FLOAT_LITERAL FOR GE GLOBAL GT ID IF IN INPUT INT LBRACE LE LOG LPAREN LT MINUS NE NUMBER NUMBER_2 NUMBER_3 OUT PLUS PRINTLN RANGE RBRACE RPAREN SEMICOLON SINGLE_QUOTE STRING STRING_LITERAL SYSTEM TIMES VAR WHILEprogram : declarations statementsdeclarations : declarations declaration\n                    | declarationdeclaration : INT ID ASSIGN NUMBER SEMICOLON\n                   | INT ID ASSIGN NUMBER_2 SEMICOLON\n                   | INT ID ASSIGN NUMBER_3 SEMICOLONstatements : statements statement\n                  | statementstatement : if_loop\n                 | while_loop\n                 | for_loop\n                 | input_statement\n                 | increment_statement\n                 | assignment_statementif_loop : DO statements ENDDOcondition : expression AND expression\n                 | expressionexpression : simple_expression comparison_operator simple_expression\n                  | simple_expression\n                  | simple_expression ASSIGN simple_expression comparison_operator simple_expression SEMICOLONsimple_expression : ID\n                         | NUMBER\n                         | NUMBER_2\n                         | NUMBER_3comparison_operator : EQ\n                           | GT\n                           | GE\n                           | LT\n                           | LE\n                           | PLUS\n                           | TIMES\n                           | NEwhile_loop : WHILE LPAREN condition RPAREN LBRACE statements RBRACEfor_loop : WHILE LPAREN INT ID comparison_operator NUMBER RPAREN ENDWHILEinput_statement : INPUT LPAREN simple_expression RPAREN SEMICOLONincrement_statement : ID PLUS PLUS SEMICOLONassignment_statement : ID ASSIGN expression SEMICOLON'
    
_lr_action_items = {'INT':([0,2,3,6,23,57,58,59,],[4,4,-3,-2,35,-4,-5,-6,]),'$end':([1,5,7,9,10,11,12,13,14,19,33,41,42,65,70,73,],[0,-1,-8,-9,-10,-11,-12,-13,-14,-7,-15,-36,-37,-35,-33,-34,]),'DO':([2,3,5,6,7,9,10,11,12,13,14,15,19,22,33,41,42,57,58,59,62,65,67,70,73,],[15,-3,15,-2,-8,-9,-10,-11,-12,-13,-14,15,-7,15,-15,-36,-37,-4,-5,-6,15,-35,15,-33,-34,]),'WHILE':([2,3,5,6,7,9,10,11,12,13,14,15,19,22,33,41,42,57,58,59,62,65,67,70,73,],[16,-3,16,-2,-8,-9,-10,-11,-12,-13,-14,16,-7,16,-15,-36,-37,-4,-5,-6,16,-35,16,-33,-34,]),'INPUT':([2,3,5,6,7,9,10,11,12,13,14,15,19,22,33,41,42,57,58,59,62,65,67,70,73,],[17,-3,17,-2,-8,-9,-10,-11,-12,-13,-14,17,-7,17,-15,-36,-37,-4,-5,-6,17,-35,17,-33,-34,]),'ID':([2,3,4,5,6,7,9,10,11,12,13,14,15,19,21,22,23,24,33,35,41,42,43,44,45,46,47,48,49,50,51,52,55,57,58,59,62,65,66,67,70,73,],[8,-3,18,8,-2,-8,-9,-10,-11,-12,-13,-14,8,-7,27,8,27,27,-15,54,-36,-37,27,27,-25,-26,-27,-28,-29,-30,-31,-32,27,-4,-5,-6,8,-35,27,8,-33,-34,]),'ENDDO':([7,9,10,11,12,13,14,19,22,33,41,42,65,70,73,],[-8,-9,-10,-11,-12,-13,-14,-7,33,-15,-36,-37,-35,-33,-34,]),'RBRACE':([7,9,10,11,12,13,14,19,33,41,42,65,67,70,73,],[-8,-9,-10,-11,-12,-13,-14,-7,-15,-36,-37,-35,70,-33,-34,]),'PLUS':([8,20,27,29,30,31,32,54,61,],[20,26,-21,50,-22,-23,-24,50,50,]),'ASSIGN':([8,18,27,29,30,31,32,],[21,25,-21,44,-22,-23,-24,]),'LPAREN':([16,17,],[23,24,]),'NUMBER':([21,23,24,25,43,44,45,46,47,48,49,50,51,52,55,63,66,],[30,30,30,38,30,30,-25,-26,-27,-28,-29,-30,-31,-32,30,68,30,]),'NUMBER_2':([21,23,24,25,43,44,45,46,47,48,49,50,51,52,55,66,],[31,31,31,39,31,31,-25,-26,-27,-28,-29,-30,-31,-32,31,31,]),'NUMBER_3':([21,23,24,25,43,44,45,46,47,48,49,50,51,52,55,66,],[32,32,32,40,32,32,-25,-26,-27,-28,-29,-30,-31,-32,32,32,]),'SEMICOLON':([26,27,28,29,30,31,32,38,39,40,56,60,69,72,],[41,-21,42,-19,-22,-23,-24,57,58,59,65,-18,72,-20,]),'EQ':([27,29,30,31,32,54,61,],[-21,45,-22,-23,-24,45,45,]),'GT':([27,29,30,31,32,54,61,],[-21,46,-22,-23,-24,46,46,]),'GE':([27,29,30,31,32,54,61,],[-21,47,-22,-23,-24,47,47,]),'LT':([27,29,30,31,32,54,61,],[-21,48,-22,-23,-24,48,48,]),'LE':([27,29,30,31,32,54,61,],[-21,49,-22,-23,-24,49,49,]),'TIMES':([27,29,30,31,32,54,61,],[-21,51,-22,-23,-24,51,51,]),'NE':([27,29,30,31,32,54,61,],[-21,52,-22,-23,-24,52,52,]),'AND':([27,29,30,31,32,36,60,72,],[-21,-19,-22,-23,-24,55,-18,-20,]),'RPAREN':([27,29,30,31,32,34,36,37,60,64,68,72,],[-21,-19,-22,-23,-24,53,-17,56,-18,-16,71,-20,]),'LBRACE':([53,],[62,]),'ENDWHILE':([71,],[73,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([0,],[2,]),'declaration':([0,2,],[3,6,]),'statements':([2,15,62,],[5,22,67,]),'statement':([2,5,15,22,62,67,],[7,19,7,19,7,19,]),'if_loop':([2,5,15,22,62,67,],[9,9,9,9,9,9,]),'while_loop':([2,5,15,22,62,67,],[10,10,10,10,10,10,]),'for_loop':([2,5,15,22,62,67,],[11,11,11,11,11,11,]),'input_statement':([2,5,15,22,62,67,],[12,12,12,12,12,12,]),'increment_statement':([2,5,15,22,62,67,],[13,13,13,13,13,13,]),'assignment_statement':([2,5,15,22,62,67,],[14,14,14,14,14,14,]),'expression':([21,23,55,],[28,36,64,]),'simple_expression':([21,23,24,43,44,55,66,],[29,29,37,60,61,29,69,]),'condition':([23,],[34,]),'comparison_operator':([29,54,61,],[43,63,66,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declarations statements','program',2,'p_program','myparser.py',9),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','myparser.py',14),
  ('declarations -> declaration','declarations',1,'p_declarations','myparser.py',15),
  ('declaration -> INT ID ASSIGN NUMBER SEMICOLON','declaration',5,'p_declaration','myparser.py',18),
  ('declaration -> INT ID ASSIGN NUMBER_2 SEMICOLON','declaration',5,'p_declaration','myparser.py',19),
  ('declaration -> INT ID ASSIGN NUMBER_3 SEMICOLON','declaration',5,'p_declaration','myparser.py',20),
  ('statements -> statements statement','statements',2,'p_statements','myparser.py',24),
  ('statements -> statement','statements',1,'p_statements','myparser.py',25),
  ('statement -> if_loop','statement',1,'p_statement','myparser.py',28),
  ('statement -> while_loop','statement',1,'p_statement','myparser.py',29),
  ('statement -> for_loop','statement',1,'p_statement','myparser.py',30),
  ('statement -> input_statement','statement',1,'p_statement','myparser.py',31),
  ('statement -> increment_statement','statement',1,'p_statement','myparser.py',32),
  ('statement -> assignment_statement','statement',1,'p_statement','myparser.py',33),
  ('if_loop -> DO statements ENDDO','if_loop',3,'p_if_loop','myparser.py',36),
  ('condition -> expression AND expression','condition',3,'p_condition','myparser.py',39),
  ('condition -> expression','condition',1,'p_condition','myparser.py',40),
  ('expression -> simple_expression comparison_operator simple_expression','expression',3,'p_expression','myparser.py',44),
  ('expression -> simple_expression','expression',1,'p_expression','myparser.py',45),
  ('expression -> simple_expression ASSIGN simple_expression comparison_operator simple_expression SEMICOLON','expression',6,'p_expression','myparser.py',46),
  ('simple_expression -> ID','simple_expression',1,'p_simple_expression','myparser.py',53),
  ('simple_expression -> NUMBER','simple_expression',1,'p_simple_expression','myparser.py',54),
  ('simple_expression -> NUMBER_2','simple_expression',1,'p_simple_expression','myparser.py',55),
  ('simple_expression -> NUMBER_3','simple_expression',1,'p_simple_expression','myparser.py',56),
  ('comparison_operator -> EQ','comparison_operator',1,'p_comparison_operator','myparser.py',62),
  ('comparison_operator -> GT','comparison_operator',1,'p_comparison_operator','myparser.py',63),
  ('comparison_operator -> GE','comparison_operator',1,'p_comparison_operator','myparser.py',64),
  ('comparison_operator -> LT','comparison_operator',1,'p_comparison_operator','myparser.py',65),
  ('comparison_operator -> LE','comparison_operator',1,'p_comparison_operator','myparser.py',66),
  ('comparison_operator -> PLUS','comparison_operator',1,'p_comparison_operator','myparser.py',67),
  ('comparison_operator -> TIMES','comparison_operator',1,'p_comparison_operator','myparser.py',68),
  ('comparison_operator -> NE','comparison_operator',1,'p_comparison_operator','myparser.py',69),
  ('while_loop -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE','while_loop',7,'p_while_loop','myparser.py',73),
  ('for_loop -> WHILE LPAREN INT ID comparison_operator NUMBER RPAREN ENDWHILE','for_loop',8,'p_for_loop','myparser.py',76),
  ('input_statement -> INPUT LPAREN simple_expression RPAREN SEMICOLON','input_statement',5,'p_input_statement','myparser.py',82),
  ('increment_statement -> ID PLUS PLUS SEMICOLON','increment_statement',4,'p_increment_statement','myparser.py',87),
  ('assignment_statement -> ID ASSIGN expression SEMICOLON','assignment_statement',4,'p_assignment_statement','myparser.py',91),
]
